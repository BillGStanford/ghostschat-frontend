{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natol\\\\OneDrive\\\\Desktop\\\\ghostschat\\\\ghostschat-frontend\\\\src\\\\components\\\\CallRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Mic, MicOff, Users, Phone, PhoneOff } from 'lucide-react';\nimport Peer from 'simple-peer';\nimport { THEMES } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getInitials = name => {\n  if (!name) return '?';\n  const parts = name.split(' ');\n  if (parts.length === 1) return parts[0].charAt(0).toUpperCase();\n  return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`.toUpperCase();\n};\nconst getColorFromName = name => {\n  if (!name) return '#6b7280';\n  const colors = ['#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16', '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9', '#3b82f6', '#6366f1', '#8b5cf6', '#a855f7', '#d946ef', '#ec4899', '#f43f5e'];\n  let hash = 0;\n  for (let i = 0; i < name.length; i++) {\n    hash = name.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return colors[Math.abs(hash) % colors.length];\n};\nconst CallRoom = ({\n  socket,\n  roomId,\n  username,\n  users,\n  callState\n}) => {\n  _s();\n  const [participants, setParticipants] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const userAudio = useRef(null);\n  const peersRef = useRef([]);\n  const streamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const speakingCheckInterval = useRef(null);\n  const currentTheme = THEMES.default;\n\n  // Initialize audio analysis for speaking detection\n  const initAudioAnalysis = useCallback(stream => {\n    if (audioContextRef.current) return;\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n      audioContextRef.current = audioContext;\n      analyserRef.current = analyser;\n\n      // Start checking speaking status\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\n      let speaking = false;\n      speakingCheckInterval.current = setInterval(() => {\n        analyser.getByteFrequencyData(dataArray);\n        const sum = dataArray.reduce((a, b) => a + b, 0);\n        const avg = sum / dataArray.length;\n        const isCurrentlySpeaking = avg > 10; // Threshold\n\n        if (isCurrentlySpeaking !== speaking) {\n          speaking = isCurrentlySpeaking;\n          setIsSpeaking(speaking);\n          socket.emit('speakingStatus', {\n            roomId,\n            isSpeaking: speaking\n          });\n        }\n      }, 200);\n    } catch (err) {\n      console.error('Audio analysis error:', err);\n    }\n  }, [socket, roomId]);\n\n  // Cleanup audio analysis\n  const cleanupAudioAnalysis = useCallback(() => {\n    if (speakingCheckInterval.current) {\n      clearInterval(speakingCheckInterval.current);\n      speakingCheckInterval.current = null;\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n    analyserRef.current = null;\n  }, []);\n\n  // Cleanup a specific peer\n  const cleanupPeer = useCallback(peerID => {\n    const peerObj = peersRef.current.find(p => p.peerID === peerID);\n    if (peerObj) {\n      peerObj.peer.destroy();\n      peersRef.current = peersRef.current.filter(p => p.peerID !== peerID);\n    }\n  }, []);\n\n  // Full cleanup\n  const cleanup = useCallback(() => {\n    cleanupAudioAnalysis();\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    peersRef.current.forEach(({\n      peer\n    }) => peer.destroy());\n    peersRef.current = [];\n    if (userAudio.current) {\n      userAudio.current.srcObject = null;\n    }\n  }, [cleanupAudioAnalysis]);\n  const createPeer = useCallback((userToSignal, callerID, stream) => {\n    const existingPeer = peersRef.current.find(p => p.peerID === userToSignal);\n    if (existingPeer) return existingPeer.peer;\n    const peer = new Peer({\n      initiator: true,\n      trickle: true,\n      stream,\n      config: {\n        iceServers: [{\n          urls: 'stun:stun.l.google.com:19302'\n        }, {\n          urls: 'stun:stun1.l.google.com:19302'\n        }]\n      }\n    });\n    peer.on('signal', signal => {\n      socket.emit('callSignal', {\n        roomId,\n        signal,\n        to: userToSignal\n      });\n    });\n    peer.on('connect', () => {\n      console.log('Peer connected:', userToSignal);\n      updateParticipantStatus(userToSignal, 'connected');\n    });\n    peer.on('error', err => {\n      console.error('Peer error:', err);\n      updateParticipantStatus(userToSignal, 'disconnected');\n      cleanupPeer(userToSignal);\n    });\n    peer.on('close', () => {\n      updateParticipantStatus(userToSignal, 'disconnected');\n      cleanupPeer(userToSignal);\n    });\n    return peer;\n  }, [socket, roomId, cleanupPeer]);\n  const addPeer = useCallback((incomingSignal, callerID, stream) => {\n    const existingPeer = peersRef.current.find(p => p.peerID === callerID);\n    if (existingPeer) return existingPeer.peer;\n    const peer = new Peer({\n      initiator: false,\n      trickle: true,\n      stream,\n      config: {\n        iceServers: [{\n          urls: 'stun:stun.l.google.com:19302'\n        }, {\n          urls: 'stun:stun1.l.google.com:19302'\n        }]\n      }\n    });\n    peer.on('signal', signal => {\n      socket.emit('callSignal', {\n        roomId,\n        signal,\n        to: callerID\n      });\n    });\n    peer.on('connect', () => {\n      console.log('Peer connected:', callerID);\n      updateParticipantStatus(callerID, 'connected');\n    });\n    peer.on('error', err => {\n      console.error('Peer error:', err);\n      updateParticipantStatus(callerID, 'disconnected');\n      cleanupPeer(callerID);\n    });\n    peer.on('close', () => {\n      updateParticipantStatus(callerID, 'disconnected');\n      cleanupPeer(callerID);\n    });\n    const signalWithRetry = () => {\n      try {\n        peer.signal(incomingSignal);\n      } catch (err) {\n        console.error('Signaling error, retrying...', err);\n        if (peer.destroyed) return;\n        setTimeout(signalWithRetry, 500);\n      }\n    };\n    signalWithRetry();\n    return peer;\n  }, [socket, roomId, cleanupPeer]);\n\n  // Update participant connection status\n  const updateParticipantStatus = (peerID, status) => {\n    setParticipants(prev => prev.map(p => p.peerID === peerID ? {\n      ...p,\n      connectionStatus: status\n    } : p));\n  };\n\n  // Update participant speaking status\n  const updateParticipantSpeaking = (peerID, isSpeaking) => {\n    setParticipants(prev => prev.map(p => p.peerID === peerID ? {\n      ...p,\n      isSpeaking\n    } : p));\n  };\n\n  // Get all participants including connection status\n  const updateAllParticipants = useCallback(() => {\n    // Start with current user\n    const allParticipants = [{\n      peerID: socket.id,\n      username,\n      isSelf: true,\n      connectionStatus: 'connected',\n      isSpeaking: false,\n      initials: getInitials(username),\n      color: getColorFromName(username)\n    }];\n\n    // Add all call participants\n    callState.participants.forEach(participantId => {\n      if (participantId !== socket.id) {\n        const existingPeer = peersRef.current.find(p => p.peerID === participantId);\n        const existingParticipant = allParticipants.find(p => p.peerID === participantId);\n        const user = users.find(u => u.id === participantId);\n        const participantUsername = (user === null || user === void 0 ? void 0 : user.username) || 'Unknown';\n        if (!existingParticipant) {\n          allParticipants.push({\n            peerID: participantId,\n            username: participantUsername,\n            isSelf: false,\n            connectionStatus: existingPeer ? 'connected' : 'connecting',\n            isSpeaking: false,\n            initials: getInitials(participantUsername),\n            color: getColorFromName(participantUsername)\n          });\n        }\n      }\n    });\n    setParticipants(allParticipants);\n  }, [socket.id, username, callState.participants, users]);\n  useEffect(() => {\n    const initCall = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        streamRef.current = stream;\n        if (userAudio.current) {\n          userAudio.current.srcObject = stream;\n        }\n\n        // Initialize audio analysis for speaking detection\n        initAudioAnalysis(stream);\n\n        // Initialize all participants\n        updateAllParticipants();\n\n        // Create peer connections for existing participants\n        callState.participants.filter(participantId => participantId !== socket.id).forEach(participantId => {\n          var _users$find;\n          const peer = createPeer(participantId, socket.id, stream);\n          peersRef.current.push({\n            peerID: participantId,\n            peer,\n            username: ((_users$find = users.find(u => u.id === participantId)) === null || _users$find === void 0 ? void 0 : _users$find.username) || 'Unknown'\n          });\n        });\n      } catch (err) {\n        console.error('Error accessing media devices:', err);\n      }\n    };\n    const handleCallSignal = ({\n      signal,\n      from\n    }) => {\n      if (!streamRef.current) return;\n      const peerObj = peersRef.current.find(p => p.peerID === from);\n      if (peerObj) {\n        try {\n          peerObj.peer.signal(signal);\n        } catch (err) {\n          console.error('Error signaling existing peer:', err);\n          updateParticipantStatus(from, 'disconnected');\n          cleanupPeer(from);\n        }\n      } else {\n        var _users$find2;\n        const peer = addPeer(signal, from, streamRef.current);\n        peersRef.current.push({\n          peerID: from,\n          peer,\n          username: ((_users$find2 = users.find(u => u.id === from)) === null || _users$find2 === void 0 ? void 0 : _users$find2.username) || 'Unknown'\n        });\n      }\n      updateAllParticipants();\n    };\n    const handleParticipantJoined = ({\n      userId,\n      username: joinedUsername\n    }) => {\n      if (userId !== socket.id && streamRef.current) {\n        const peer = createPeer(userId, socket.id, streamRef.current);\n        peersRef.current.push({\n          peerID: userId,\n          peer,\n          username: joinedUsername\n        });\n      }\n      updateAllParticipants();\n    };\n    const handleParticipantLeft = ({\n      userId\n    }) => {\n      cleanupPeer(userId);\n      updateParticipantStatus(userId, 'left');\n    };\n    const handleSpeakingStatus = ({\n      userId,\n      isSpeaking\n    }) => {\n      updateParticipantSpeaking(userId, isSpeaking);\n    };\n    initCall();\n    socket.on('callSignal', handleCallSignal);\n    socket.on('callParticipantJoined', handleParticipantJoined);\n    socket.on('callParticipantLeft', handleParticipantLeft);\n    socket.on('speakingStatus', handleSpeakingStatus);\n    socket.on('callEnded', cleanup);\n\n    // Periodic participant list refresh\n    const interval = setInterval(updateAllParticipants, 3000);\n    return () => {\n      cleanup();\n      clearInterval(interval);\n      socket.off('callSignal', handleCallSignal);\n      socket.off('callParticipantJoined', handleParticipantJoined);\n      socket.off('callParticipantLeft', handleParticipantLeft);\n      socket.off('speakingStatus', handleSpeakingStatus);\n      socket.off('callEnded', cleanup);\n    };\n  }, [socket, roomId, callState, users, createPeer, addPeer, cleanup, cleanupPeer, updateAllParticipants, initAudioAnalysis]);\n  const toggleMute = () => {\n    if (streamRef.current) {\n      const newMutedState = !isMuted;\n      streamRef.current.getAudioTracks().forEach(track => {\n        track.enabled = !newMutedState;\n      });\n      setIsMuted(newMutedState);\n      setIsSpeaking(false);\n      socket.emit('speakingStatus', {\n        roomId,\n        isSpeaking: false\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex-1 ${currentTheme.card} p-4 overflow-y-auto scrollbar-thin scrollbar-thumb-ghost-600 scrollbar-track-ghost-800`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: `text-lg font-bold ${currentTheme.textPrimary} gradient-text`,\n        children: \"Voice Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleMute,\n          className: `rounded-xl p-2 flex items-center space-x-2 ${isMuted ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} text-white transition-all duration-200`,\n          children: [isMuted ? /*#__PURE__*/_jsxDEV(MicOff, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 24\n          }, this) : /*#__PURE__*/_jsxDEV(Mic, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 57\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: isMuted ? 'Unmute' : 'Mute'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\",\n      children: participants.map(({\n        peerID,\n        username: participantUsername,\n        isSelf,\n        connectionStatus,\n        isSpeaking,\n        initials,\n        color\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${currentTheme.buttonSecondary} rounded-xl p-4 flex flex-col items-center transition-all duration-300 ${isSpeaking ? 'ring-2 ring-purple-500 transform scale-105' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold text-white mb-2 relative\",\n          style: {\n            backgroundColor: color\n          },\n          children: [initials, connectionStatus === 'connected' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute bottom-0 right-0 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this), connectionStatus === 'connecting' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute bottom-0 right-0 w-4 h-4 bg-yellow-500 rounded-full border-2 border-white animate-pulse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this), connectionStatus === 'disconnected' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute bottom-0 right-0 w-4 h-4 bg-red-500 rounded-full border-2 border-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `text-sm ${currentTheme.textPrimary} font-medium text-center`,\n          children: [participantUsername, \" \", isSelf && '(You)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `text-xs mt-1 ${connectionStatus === 'connected' ? 'text-green-500' : connectionStatus === 'connecting' ? 'text-yellow-500' : 'text-red-500'}`,\n          children: connectionStatus === 'connected' ? 'Connected' : connectionStatus === 'connecting' ? 'Connecting...' : 'Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-1 mt-2\",\n          children: [1, 2, 3].map(i => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-1 h-1 bg-purple-500 rounded-full animate-bounce\",\n            style: {\n              animationDelay: `${i * 0.1}s`\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 15\n        }, this), isSelf && /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: userAudio,\n          autoPlay: true,\n          muted: isMuted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 24\n        }, this)]\n      }, `${peerID}-${participantUsername}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n};\n_s(CallRoom, \"VMMQlc4JFKnnDdeLqQyo3aK87xw=\");\n_c = CallRoom;\nexport default CallRoom;\nvar _c;\n$RefreshReg$(_c, \"CallRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Mic","MicOff","Users","Phone","PhoneOff","Peer","THEMES","jsxDEV","_jsxDEV","getInitials","name","parts","split","length","charAt","toUpperCase","getColorFromName","colors","hash","i","charCodeAt","Math","abs","CallRoom","socket","roomId","username","users","callState","_s","participants","setParticipants","isMuted","setIsMuted","isSpeaking","setIsSpeaking","userAudio","peersRef","streamRef","audioContextRef","analyserRef","speakingCheckInterval","currentTheme","default","initAudioAnalysis","stream","current","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","dataArray","Uint8Array","frequencyBinCount","speaking","setInterval","getByteFrequencyData","sum","reduce","a","b","avg","isCurrentlySpeaking","emit","err","console","error","cleanupAudioAnalysis","clearInterval","close","cleanupPeer","peerID","peerObj","find","p","peer","destroy","filter","cleanup","getTracks","forEach","track","stop","srcObject","createPeer","userToSignal","callerID","existingPeer","initiator","trickle","config","iceServers","urls","on","signal","to","log","updateParticipantStatus","addPeer","incomingSignal","signalWithRetry","destroyed","setTimeout","status","prev","map","connectionStatus","updateParticipantSpeaking","updateAllParticipants","allParticipants","id","isSelf","initials","color","participantId","existingParticipant","user","u","participantUsername","push","initCall","navigator","mediaDevices","getUserMedia","audio","_users$find","handleCallSignal","from","_users$find2","handleParticipantJoined","userId","joinedUsername","handleParticipantLeft","handleSpeakingStatus","interval","off","toggleMute","newMutedState","getAudioTracks","enabled","className","card","children","textPrimary","fileName","_jsxFileName","lineNumber","columnNumber","onClick","buttonSecondary","style","backgroundColor","animationDelay","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/natol/OneDrive/Desktop/ghostschat/ghostschat-frontend/src/components/CallRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Mic, MicOff, Users, Phone, PhoneOff } from 'lucide-react';\r\nimport Peer from 'simple-peer';\r\nimport { THEMES } from '../constants';\r\n\r\nconst getInitials = (name) => {\r\n  if (!name) return '?';\r\n  const parts = name.split(' ');\r\n  if (parts.length === 1) return parts[0].charAt(0).toUpperCase();\r\n  return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`.toUpperCase();\r\n};\r\n\r\nconst getColorFromName = (name) => {\r\n  if (!name) return '#6b7280';\r\n  const colors = [\r\n    '#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16', \r\n    '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9',\r\n    '#3b82f6', '#6366f1', '#8b5cf6', '#a855f7', '#d946ef',\r\n    '#ec4899', '#f43f5e'\r\n  ];\r\n  let hash = 0;\r\n  for (let i = 0; i < name.length; i++) {\r\n    hash = name.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  return colors[Math.abs(hash) % colors.length];\r\n};\r\n\r\nconst CallRoom = ({ socket, roomId, username, users, callState }) => {\r\n  const [participants, setParticipants] = useState([]);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const userAudio = useRef(null);\r\n  const peersRef = useRef([]);\r\n  const streamRef = useRef(null);\r\n  const audioContextRef = useRef(null);\r\n  const analyserRef = useRef(null);\r\n  const speakingCheckInterval = useRef(null);\r\n  const currentTheme = THEMES.default;\r\n\r\n  // Initialize audio analysis for speaking detection\r\n  const initAudioAnalysis = useCallback((stream) => {\r\n    if (audioContextRef.current) return;\r\n    \r\n    try {\r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 256;\r\n      \r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      source.connect(analyser);\r\n      \r\n      audioContextRef.current = audioContext;\r\n      analyserRef.current = analyser;\r\n      \r\n      // Start checking speaking status\r\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n      let speaking = false;\r\n      \r\n      speakingCheckInterval.current = setInterval(() => {\r\n        analyser.getByteFrequencyData(dataArray);\r\n        const sum = dataArray.reduce((a, b) => a + b, 0);\r\n        const avg = sum / dataArray.length;\r\n        const isCurrentlySpeaking = avg > 10; // Threshold\r\n        \r\n        if (isCurrentlySpeaking !== speaking) {\r\n          speaking = isCurrentlySpeaking;\r\n          setIsSpeaking(speaking);\r\n          socket.emit('speakingStatus', { roomId, isSpeaking: speaking });\r\n        }\r\n      }, 200);\r\n    } catch (err) {\r\n      console.error('Audio analysis error:', err);\r\n    }\r\n  }, [socket, roomId]);\r\n\r\n  // Cleanup audio analysis\r\n  const cleanupAudioAnalysis = useCallback(() => {\r\n    if (speakingCheckInterval.current) {\r\n      clearInterval(speakingCheckInterval.current);\r\n      speakingCheckInterval.current = null;\r\n    }\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n      audioContextRef.current = null;\r\n    }\r\n    analyserRef.current = null;\r\n  }, []);\r\n\r\n  // Cleanup a specific peer\r\n  const cleanupPeer = useCallback((peerID) => {\r\n    const peerObj = peersRef.current.find(p => p.peerID === peerID);\r\n    if (peerObj) {\r\n      peerObj.peer.destroy();\r\n      peersRef.current = peersRef.current.filter(p => p.peerID !== peerID);\r\n    }\r\n  }, []);\r\n\r\n  // Full cleanup\r\n  const cleanup = useCallback(() => {\r\n    cleanupAudioAnalysis();\r\n    \r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n    \r\n    peersRef.current.forEach(({ peer }) => peer.destroy());\r\n    peersRef.current = [];\r\n    \r\n    if (userAudio.current) {\r\n      userAudio.current.srcObject = null;\r\n    }\r\n  }, [cleanupAudioAnalysis]);\r\n\r\n  const createPeer = useCallback((userToSignal, callerID, stream) => {\r\n    const existingPeer = peersRef.current.find(p => p.peerID === userToSignal);\r\n    if (existingPeer) return existingPeer.peer;\r\n\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: true,\r\n      stream,\r\n      config: {\r\n        iceServers: [\r\n          { urls: 'stun:stun.l.google.com:19302' },\r\n          { urls: 'stun:stun1.l.google.com:19302' }\r\n        ]\r\n      }\r\n    });\r\n\r\n    peer.on('signal', signal => {\r\n      socket.emit('callSignal', { roomId, signal, to: userToSignal });\r\n    });\r\n\r\n    peer.on('connect', () => {\r\n      console.log('Peer connected:', userToSignal);\r\n      updateParticipantStatus(userToSignal, 'connected');\r\n    });\r\n\r\n    peer.on('error', err => {\r\n      console.error('Peer error:', err);\r\n      updateParticipantStatus(userToSignal, 'disconnected');\r\n      cleanupPeer(userToSignal);\r\n    });\r\n\r\n    peer.on('close', () => {\r\n      updateParticipantStatus(userToSignal, 'disconnected');\r\n      cleanupPeer(userToSignal);\r\n    });\r\n\r\n    return peer;\r\n  }, [socket, roomId, cleanupPeer]);\r\n\r\n  const addPeer = useCallback((incomingSignal, callerID, stream) => {\r\n    const existingPeer = peersRef.current.find(p => p.peerID === callerID);\r\n    if (existingPeer) return existingPeer.peer;\r\n\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: true,\r\n      stream,\r\n      config: {\r\n        iceServers: [\r\n          { urls: 'stun:stun.l.google.com:19302' },\r\n          { urls: 'stun:stun1.l.google.com:19302' }\r\n        ]\r\n      }\r\n    });\r\n\r\n    peer.on('signal', signal => {\r\n      socket.emit('callSignal', { roomId, signal, to: callerID });\r\n    });\r\n\r\n    peer.on('connect', () => {\r\n      console.log('Peer connected:', callerID);\r\n      updateParticipantStatus(callerID, 'connected');\r\n    });\r\n\r\n    peer.on('error', err => {\r\n      console.error('Peer error:', err);\r\n      updateParticipantStatus(callerID, 'disconnected');\r\n      cleanupPeer(callerID);\r\n    });\r\n\r\n    peer.on('close', () => {\r\n      updateParticipantStatus(callerID, 'disconnected');\r\n      cleanupPeer(callerID);\r\n    });\r\n\r\n    const signalWithRetry = () => {\r\n      try {\r\n        peer.signal(incomingSignal);\r\n      } catch (err) {\r\n        console.error('Signaling error, retrying...', err);\r\n        if (peer.destroyed) return;\r\n        setTimeout(signalWithRetry, 500);\r\n      }\r\n    };\r\n\r\n    signalWithRetry();\r\n    \r\n    return peer;\r\n  }, [socket, roomId, cleanupPeer]);\r\n\r\n  // Update participant connection status\r\n  const updateParticipantStatus = (peerID, status) => {\r\n    setParticipants(prev => prev.map(p => \r\n      p.peerID === peerID ? { ...p, connectionStatus: status } : p\r\n    ));\r\n  };\r\n\r\n  // Update participant speaking status\r\n  const updateParticipantSpeaking = (peerID, isSpeaking) => {\r\n    setParticipants(prev => prev.map(p => \r\n      p.peerID === peerID ? { ...p, isSpeaking } : p\r\n    ));\r\n  };\r\n\r\n  // Get all participants including connection status\r\n  const updateAllParticipants = useCallback(() => {\r\n    // Start with current user\r\n    const allParticipants = [{ \r\n      peerID: socket.id, \r\n      username,\r\n      isSelf: true,\r\n      connectionStatus: 'connected',\r\n      isSpeaking: false,\r\n      initials: getInitials(username),\r\n      color: getColorFromName(username)\r\n    }];\r\n\r\n    // Add all call participants\r\n    callState.participants.forEach(participantId => {\r\n      if (participantId !== socket.id) {\r\n        const existingPeer = peersRef.current.find(p => p.peerID === participantId);\r\n        const existingParticipant = allParticipants.find(p => p.peerID === participantId);\r\n        const user = users.find(u => u.id === participantId);\r\n        const participantUsername = user?.username || 'Unknown';\r\n        \r\n        if (!existingParticipant) {\r\n          allParticipants.push({\r\n            peerID: participantId,\r\n            username: participantUsername,\r\n            isSelf: false,\r\n            connectionStatus: existingPeer ? 'connected' : 'connecting',\r\n            isSpeaking: false,\r\n            initials: getInitials(participantUsername),\r\n            color: getColorFromName(participantUsername)\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    setParticipants(allParticipants);\r\n  }, [socket.id, username, callState.participants, users]);\r\n\r\n  useEffect(() => {\r\n    const initCall = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        streamRef.current = stream;\r\n        \r\n        if (userAudio.current) {\r\n          userAudio.current.srcObject = stream;\r\n        }\r\n\r\n        // Initialize audio analysis for speaking detection\r\n        initAudioAnalysis(stream);\r\n\r\n        // Initialize all participants\r\n        updateAllParticipants();\r\n\r\n        // Create peer connections for existing participants\r\n        callState.participants\r\n          .filter(participantId => participantId !== socket.id)\r\n          .forEach(participantId => {\r\n            const peer = createPeer(participantId, socket.id, stream);\r\n            peersRef.current.push({\r\n              peerID: participantId,\r\n              peer,\r\n              username: users.find(u => u.id === participantId)?.username || 'Unknown',\r\n            });\r\n          });\r\n\r\n      } catch (err) {\r\n        console.error('Error accessing media devices:', err);\r\n      }\r\n    };\r\n\r\n    const handleCallSignal = ({ signal, from }) => {\r\n      if (!streamRef.current) return;\r\n      \r\n      const peerObj = peersRef.current.find(p => p.peerID === from);\r\n      if (peerObj) {\r\n        try {\r\n          peerObj.peer.signal(signal);\r\n        } catch (err) {\r\n          console.error('Error signaling existing peer:', err);\r\n          updateParticipantStatus(from, 'disconnected');\r\n          cleanupPeer(from);\r\n        }\r\n      } else {\r\n        const peer = addPeer(signal, from, streamRef.current);\r\n        peersRef.current.push({\r\n          peerID: from,\r\n          peer,\r\n          username: users.find(u => u.id === from)?.username || 'Unknown',\r\n        });\r\n      }\r\n      updateAllParticipants();\r\n    };\r\n\r\n    const handleParticipantJoined = ({ userId, username: joinedUsername }) => {\r\n      if (userId !== socket.id && streamRef.current) {\r\n        const peer = createPeer(userId, socket.id, streamRef.current);\r\n        peersRef.current.push({\r\n          peerID: userId,\r\n          peer,\r\n          username: joinedUsername,\r\n        });\r\n      }\r\n      updateAllParticipants();\r\n    };\r\n\r\n    const handleParticipantLeft = ({ userId }) => {\r\n      cleanupPeer(userId);\r\n      updateParticipantStatus(userId, 'left');\r\n    };\r\n\r\n    const handleSpeakingStatus = ({ userId, isSpeaking }) => {\r\n      updateParticipantSpeaking(userId, isSpeaking);\r\n    };\r\n\r\n    initCall();\r\n\r\n    socket.on('callSignal', handleCallSignal);\r\n    socket.on('callParticipantJoined', handleParticipantJoined);\r\n    socket.on('callParticipantLeft', handleParticipantLeft);\r\n    socket.on('speakingStatus', handleSpeakingStatus);\r\n    socket.on('callEnded', cleanup);\r\n\r\n    // Periodic participant list refresh\r\n    const interval = setInterval(updateAllParticipants, 3000);\r\n\r\n    return () => {\r\n      cleanup();\r\n      clearInterval(interval);\r\n      socket.off('callSignal', handleCallSignal);\r\n      socket.off('callParticipantJoined', handleParticipantJoined);\r\n      socket.off('callParticipantLeft', handleParticipantLeft);\r\n      socket.off('speakingStatus', handleSpeakingStatus);\r\n      socket.off('callEnded', cleanup);\r\n    };\r\n  }, [socket, roomId, callState, users, createPeer, addPeer, cleanup, cleanupPeer, updateAllParticipants, initAudioAnalysis]);\r\n\r\n  const toggleMute = () => {\r\n    if (streamRef.current) {\r\n      const newMutedState = !isMuted;\r\n      streamRef.current.getAudioTracks().forEach(track => {\r\n        track.enabled = !newMutedState;\r\n      });\r\n      setIsMuted(newMutedState);\r\n      setIsSpeaking(false);\r\n      socket.emit('speakingStatus', { roomId, isSpeaking: false });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className={`flex-1 ${currentTheme.card} p-4 overflow-y-auto scrollbar-thin scrollbar-thumb-ghost-600 scrollbar-track-ghost-800`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className={`text-lg font-bold ${currentTheme.textPrimary} gradient-text`}>Voice Call</h2>\r\n        <div className=\"flex space-x-2\">\r\n          <button\r\n            onClick={toggleMute}\r\n            className={`rounded-xl p-2 flex items-center space-x-2 ${\r\n              isMuted ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'\r\n            } text-white transition-all duration-200`}\r\n          >\r\n            {isMuted ? <MicOff className=\"w-5 h-5\" /> : <Mic className=\"w-5 h-5\" />}\r\n            <span>{isMuted ? 'Unmute' : 'Mute'}</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n        {participants.map(({ peerID, username: participantUsername, isSelf, connectionStatus, isSpeaking, initials, color }) => (\r\n          <div \r\n            key={`${peerID}-${participantUsername}`}\r\n            className={`${currentTheme.buttonSecondary} rounded-xl p-4 flex flex-col items-center transition-all duration-300 ${\r\n              isSpeaking ? 'ring-2 ring-purple-500 transform scale-105' : ''\r\n            }`}\r\n          >\r\n            <div \r\n              className=\"w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold text-white mb-2 relative\"\r\n              style={{ backgroundColor: color }}\r\n            >\r\n              {initials}\r\n              {connectionStatus === 'connected' && (\r\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"></div>\r\n              )}\r\n              {connectionStatus === 'connecting' && (\r\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-yellow-500 rounded-full border-2 border-white animate-pulse\"></div>\r\n              )}\r\n              {connectionStatus === 'disconnected' && (\r\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-red-500 rounded-full border-2 border-white\"></div>\r\n              )}\r\n            </div>\r\n            \r\n            <span className={`text-sm ${currentTheme.textPrimary} font-medium text-center`}>\r\n              {participantUsername} {isSelf && '(You)'}\r\n            </span>\r\n            \r\n            <span className={`text-xs mt-1 ${\r\n              connectionStatus === 'connected' ? 'text-green-500' :\r\n              connectionStatus === 'connecting' ? 'text-yellow-500' :\r\n              'text-red-500'\r\n            }`}>\r\n              {connectionStatus === 'connected' ? 'Connected' :\r\n               connectionStatus === 'connecting' ? 'Connecting...' :\r\n               'Disconnected'}\r\n            </span>\r\n            \r\n            {isSpeaking && (\r\n              <div className=\"flex space-x-1 mt-2\">\r\n                {[1, 2, 3].map((i) => (\r\n                  <div \r\n                    key={i}\r\n                    className=\"w-1 h-1 bg-purple-500 rounded-full animate-bounce\"\r\n                    style={{ animationDelay: `${i * 0.1}s` }}\r\n                  ></div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            \r\n            {isSelf && <audio ref={userAudio} autoPlay muted={isMuted} />}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CallRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}