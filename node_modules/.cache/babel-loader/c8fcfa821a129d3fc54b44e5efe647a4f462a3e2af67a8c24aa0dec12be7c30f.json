{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import{Mic,MicOff,Users,Phone,PhoneOff}from'lucide-react';import Peer from'simple-peer';import{THEMES}from'../constants';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const getInitials=name=>{if(!name)return'?';const parts=name.split(' ');if(parts.length===1)return parts[0].charAt(0).toUpperCase();return`${parts[0].charAt(0)}${parts[parts.length-1].charAt(0)}`.toUpperCase();};const getColorFromName=name=>{if(!name)return'#6b7280';const colors=['#ef4444','#f97316','#f59e0b','#eab308','#84cc16','#22c55e','#10b981','#14b8a6','#06b6d4','#0ea5e9','#3b82f6','#6366f1','#8b5cf6','#a855f7','#d946ef','#ec4899','#f43f5e'];let hash=0;for(let i=0;i<name.length;i++){hash=name.charCodeAt(i)+((hash<<5)-hash);}return colors[Math.abs(hash)%colors.length];};const CallRoom=_ref=>{let{socket,roomId,username,users,callState}=_ref;const[participants,setParticipants]=useState([]);const[isMuted,setIsMuted]=useState(false);const[isSpeaking,setIsSpeaking]=useState(false);const userAudio=useRef(null);const peersRef=useRef([]);const streamRef=useRef(null);const audioContextRef=useRef(null);const analyserRef=useRef(null);const speakingCheckInterval=useRef(null);const currentTheme=THEMES.default;// Initialize audio analysis for speaking detection\nconst initAudioAnalysis=useCallback(stream=>{if(audioContextRef.current)return;try{const audioContext=new(window.AudioContext||window.webkitAudioContext)();const analyser=audioContext.createAnalyser();analyser.fftSize=256;const source=audioContext.createMediaStreamSource(stream);source.connect(analyser);audioContextRef.current=audioContext;analyserRef.current=analyser;// Start checking speaking status\nconst dataArray=new Uint8Array(analyser.frequencyBinCount);let speaking=false;speakingCheckInterval.current=setInterval(()=>{analyser.getByteFrequencyData(dataArray);const sum=dataArray.reduce((a,b)=>a+b,0);const avg=sum/dataArray.length;const isCurrentlySpeaking=avg>10;// Threshold\nif(isCurrentlySpeaking!==speaking){speaking=isCurrentlySpeaking;setIsSpeaking(speaking);socket.emit('speakingStatus',{roomId,isSpeaking:speaking});}},200);}catch(err){console.error('Audio analysis error:',err);}},[socket,roomId]);// Cleanup audio analysis\nconst cleanupAudioAnalysis=useCallback(()=>{if(speakingCheckInterval.current){clearInterval(speakingCheckInterval.current);speakingCheckInterval.current=null;}if(audioContextRef.current){audioContextRef.current.close();audioContextRef.current=null;}analyserRef.current=null;},[]);// Cleanup a specific peer\nconst cleanupPeer=useCallback(peerID=>{const peerObj=peersRef.current.find(p=>p.peerID===peerID);if(peerObj){peerObj.peer.destroy();peersRef.current=peersRef.current.filter(p=>p.peerID!==peerID);}},[]);// Full cleanup\nconst cleanup=useCallback(()=>{cleanupAudioAnalysis();if(streamRef.current){streamRef.current.getTracks().forEach(track=>track.stop());streamRef.current=null;}peersRef.current.forEach(_ref2=>{let{peer}=_ref2;return peer.destroy();});peersRef.current=[];if(userAudio.current){userAudio.current.srcObject=null;}},[cleanupAudioAnalysis]);const createPeer=useCallback((userToSignal,callerID,stream)=>{const existingPeer=peersRef.current.find(p=>p.peerID===userToSignal);if(existingPeer)return existingPeer.peer;const peer=new Peer({initiator:true,trickle:true,stream,config:{iceServers:[{urls:'stun:stun.l.google.com:19302'},{urls:'stun:stun1.l.google.com:19302'}]}});peer.on('signal',signal=>{socket.emit('callSignal',{roomId,signal,to:userToSignal});});peer.on('connect',()=>{console.log('Peer connected:',userToSignal);updateParticipantStatus(userToSignal,'connected');});peer.on('error',err=>{console.error('Peer error:',err);updateParticipantStatus(userToSignal,'disconnected');cleanupPeer(userToSignal);});peer.on('close',()=>{updateParticipantStatus(userToSignal,'disconnected');cleanupPeer(userToSignal);});return peer;},[socket,roomId,cleanupPeer]);const addPeer=useCallback((incomingSignal,callerID,stream)=>{const existingPeer=peersRef.current.find(p=>p.peerID===callerID);if(existingPeer)return existingPeer.peer;const peer=new Peer({initiator:false,trickle:true,stream,config:{iceServers:[{urls:'stun:stun.l.google.com:19302'},{urls:'stun:stun1.l.google.com:19302'}]}});peer.on('signal',signal=>{socket.emit('callSignal',{roomId,signal,to:callerID});});peer.on('connect',()=>{console.log('Peer connected:',callerID);updateParticipantStatus(callerID,'connected');});peer.on('error',err=>{console.error('Peer error:',err);updateParticipantStatus(callerID,'disconnected');cleanupPeer(callerID);});peer.on('close',()=>{updateParticipantStatus(callerID,'disconnected');cleanupPeer(callerID);});const signalWithRetry=()=>{try{peer.signal(incomingSignal);}catch(err){console.error('Signaling error, retrying...',err);if(peer.destroyed)return;setTimeout(signalWithRetry,500);}};signalWithRetry();return peer;},[socket,roomId,cleanupPeer]);// Update participant connection status\nconst updateParticipantStatus=(peerID,status)=>{setParticipants(prev=>prev.map(p=>p.peerID===peerID?{...p,connectionStatus:status}:p));};// Update participant speaking status\nconst updateParticipantSpeaking=(peerID,isSpeaking)=>{setParticipants(prev=>prev.map(p=>p.peerID===peerID?{...p,isSpeaking}:p));};// Get all participants including connection status\nconst updateAllParticipants=useCallback(()=>{// Start with current user\nconst allParticipants=[{peerID:socket.id,username,isSelf:true,connectionStatus:'connected',isSpeaking:false,initials:getInitials(username),color:getColorFromName(username)}];// Add all call participants\ncallState.participants.forEach(participantId=>{if(participantId!==socket.id){const existingPeer=peersRef.current.find(p=>p.peerID===participantId);const existingParticipant=allParticipants.find(p=>p.peerID===participantId);const user=users.find(u=>u.id===participantId);const participantUsername=(user===null||user===void 0?void 0:user.username)||'Unknown';if(!existingParticipant){allParticipants.push({peerID:participantId,username:participantUsername,isSelf:false,connectionStatus:existingPeer?'connected':'connecting',isSpeaking:false,initials:getInitials(participantUsername),color:getColorFromName(participantUsername)});}}});setParticipants(allParticipants);},[socket.id,username,callState.participants,users]);useEffect(()=>{const initCall=async()=>{try{const stream=await navigator.mediaDevices.getUserMedia({audio:true});streamRef.current=stream;if(userAudio.current){userAudio.current.srcObject=stream;}// Initialize audio analysis for speaking detection\ninitAudioAnalysis(stream);// Initialize all participants\nupdateAllParticipants();// Create peer connections for existing participants\ncallState.participants.filter(participantId=>participantId!==socket.id).forEach(participantId=>{var _users$find;const peer=createPeer(participantId,socket.id,stream);peersRef.current.push({peerID:participantId,peer,username:((_users$find=users.find(u=>u.id===participantId))===null||_users$find===void 0?void 0:_users$find.username)||'Unknown'});});}catch(err){console.error('Error accessing media devices:',err);}};const handleCallSignal=_ref3=>{let{signal,from}=_ref3;if(!streamRef.current)return;const peerObj=peersRef.current.find(p=>p.peerID===from);if(peerObj){try{peerObj.peer.signal(signal);}catch(err){console.error('Error signaling existing peer:',err);updateParticipantStatus(from,'disconnected');cleanupPeer(from);}}else{var _users$find2;const peer=addPeer(signal,from,streamRef.current);peersRef.current.push({peerID:from,peer,username:((_users$find2=users.find(u=>u.id===from))===null||_users$find2===void 0?void 0:_users$find2.username)||'Unknown'});}updateAllParticipants();};const handleParticipantJoined=_ref4=>{let{userId,username:joinedUsername}=_ref4;if(userId!==socket.id&&streamRef.current){const peer=createPeer(userId,socket.id,streamRef.current);peersRef.current.push({peerID:userId,peer,username:joinedUsername});}updateAllParticipants();};const handleParticipantLeft=_ref5=>{let{userId}=_ref5;cleanupPeer(userId);updateParticipantStatus(userId,'left');};const handleSpeakingStatus=_ref6=>{let{userId,isSpeaking}=_ref6;updateParticipantSpeaking(userId,isSpeaking);};initCall();socket.on('callSignal',handleCallSignal);socket.on('callParticipantJoined',handleParticipantJoined);socket.on('callParticipantLeft',handleParticipantLeft);socket.on('speakingStatus',handleSpeakingStatus);socket.on('callEnded',cleanup);// Periodic participant list refresh\nconst interval=setInterval(updateAllParticipants,3000);return()=>{cleanup();clearInterval(interval);socket.off('callSignal',handleCallSignal);socket.off('callParticipantJoined',handleParticipantJoined);socket.off('callParticipantLeft',handleParticipantLeft);socket.off('speakingStatus',handleSpeakingStatus);socket.off('callEnded',cleanup);};},[socket,roomId,callState,users,createPeer,addPeer,cleanup,cleanupPeer,updateAllParticipants,initAudioAnalysis]);const toggleMute=()=>{if(streamRef.current){const newMutedState=!isMuted;streamRef.current.getAudioTracks().forEach(track=>{track.enabled=!newMutedState;});setIsMuted(newMutedState);setIsSpeaking(false);socket.emit('speakingStatus',{roomId,isSpeaking:false});}};return/*#__PURE__*/_jsxs(\"div\",{className:`flex-1 ${currentTheme.card} p-4 overflow-y-auto scrollbar-thin scrollbar-thumb-ghost-600 scrollbar-track-ghost-800`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-4\",children:[/*#__PURE__*/_jsx(\"h2\",{className:`text-lg font-bold ${currentTheme.textPrimary} gradient-text`,children:\"Voice Call\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex space-x-2\",children:/*#__PURE__*/_jsxs(\"button\",{onClick:toggleMute,className:`rounded-xl p-2 flex items-center space-x-2 ${isMuted?'bg-red-500 hover:bg-red-600':'bg-green-500 hover:bg-green-600'} text-white transition-all duration-200`,children:[isMuted?/*#__PURE__*/_jsx(MicOff,{className:\"w-5 h-5\"}):/*#__PURE__*/_jsx(Mic,{className:\"w-5 h-5\"}),/*#__PURE__*/_jsx(\"span\",{children:isMuted?'Unmute':'Mute'})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\",children:participants.map(_ref7=>{let{peerID,username:participantUsername,isSelf,connectionStatus,isSpeaking,initials,color}=_ref7;return/*#__PURE__*/_jsxs(\"div\",{className:`${currentTheme.buttonSecondary} rounded-xl p-4 flex flex-col items-center transition-all duration-300 ${isSpeaking?'ring-2 ring-purple-500 transform scale-105':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold text-white mb-2 relative\",style:{backgroundColor:color},children:[initials,connectionStatus==='connected'&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 right-0 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"}),connectionStatus==='connecting'&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 right-0 w-4 h-4 bg-yellow-500 rounded-full border-2 border-white animate-pulse\"}),connectionStatus==='disconnected'&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 right-0 w-4 h-4 bg-red-500 rounded-full border-2 border-white\"})]}),/*#__PURE__*/_jsxs(\"span\",{className:`text-sm ${currentTheme.textPrimary} font-medium text-center`,children:[participantUsername,\" \",isSelf&&'(You)']}),/*#__PURE__*/_jsx(\"span\",{className:`text-xs mt-1 ${connectionStatus==='connected'?'text-green-500':connectionStatus==='connecting'?'text-yellow-500':'text-red-500'}`,children:connectionStatus==='connected'?'Connected':connectionStatus==='connecting'?'Connecting...':'Disconnected'}),isSpeaking&&/*#__PURE__*/_jsx(\"div\",{className:\"flex space-x-1 mt-2\",children:[1,2,3].map(i=>/*#__PURE__*/_jsx(\"div\",{className:\"w-1 h-1 bg-purple-500 rounded-full animate-bounce\",style:{animationDelay:`${i*0.1}s`}},i))}),isSelf&&/*#__PURE__*/_jsx(\"audio\",{ref:userAudio,autoPlay:true,muted:isMuted})]},`${peerID}-${participantUsername}`);})})]});};export default CallRoom;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Mic","MicOff","Users","Phone","PhoneOff","Peer","THEMES","jsx","_jsx","jsxs","_jsxs","getInitials","name","parts","split","length","charAt","toUpperCase","getColorFromName","colors","hash","i","charCodeAt","Math","abs","CallRoom","_ref","socket","roomId","username","users","callState","participants","setParticipants","isMuted","setIsMuted","isSpeaking","setIsSpeaking","userAudio","peersRef","streamRef","audioContextRef","analyserRef","speakingCheckInterval","currentTheme","default","initAudioAnalysis","stream","current","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","dataArray","Uint8Array","frequencyBinCount","speaking","setInterval","getByteFrequencyData","sum","reduce","a","b","avg","isCurrentlySpeaking","emit","err","console","error","cleanupAudioAnalysis","clearInterval","close","cleanupPeer","peerID","peerObj","find","p","peer","destroy","filter","cleanup","getTracks","forEach","track","stop","_ref2","srcObject","createPeer","userToSignal","callerID","existingPeer","initiator","trickle","config","iceServers","urls","on","signal","to","log","updateParticipantStatus","addPeer","incomingSignal","signalWithRetry","destroyed","setTimeout","status","prev","map","connectionStatus","updateParticipantSpeaking","updateAllParticipants","allParticipants","id","isSelf","initials","color","participantId","existingParticipant","user","u","participantUsername","push","initCall","navigator","mediaDevices","getUserMedia","audio","_users$find","handleCallSignal","_ref3","from","_users$find2","handleParticipantJoined","_ref4","userId","joinedUsername","handleParticipantLeft","_ref5","handleSpeakingStatus","_ref6","interval","off","toggleMute","newMutedState","getAudioTracks","enabled","className","card","children","textPrimary","onClick","_ref7","buttonSecondary","style","backgroundColor","animationDelay","ref","autoPlay","muted"],"sources":["C:/Users/natol/OneDrive/Desktop/ghostschat/ghostschat-frontend/src/components/CallRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Mic, MicOff, Users, Phone, PhoneOff } from 'lucide-react';\r\nimport Peer from 'simple-peer';\r\nimport { THEMES } from '../constants';\r\n\r\nconst getInitials = (name) => {\r\n  if (!name) return '?';\r\n  const parts = name.split(' ');\r\n  if (parts.length === 1) return parts[0].charAt(0).toUpperCase();\r\n  return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`.toUpperCase();\r\n};\r\n\r\nconst getColorFromName = (name) => {\r\n  if (!name) return '#6b7280';\r\n  const colors = [\r\n    '#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16', \r\n    '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9',\r\n    '#3b82f6', '#6366f1', '#8b5cf6', '#a855f7', '#d946ef',\r\n    '#ec4899', '#f43f5e'\r\n  ];\r\n  let hash = 0;\r\n  for (let i = 0; i < name.length; i++) {\r\n    hash = name.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  return colors[Math.abs(hash) % colors.length];\r\n};\r\n\r\nconst CallRoom = ({ socket, roomId, username, users, callState }) => {\r\n  const [participants, setParticipants] = useState([]);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const userAudio = useRef(null);\r\n  const peersRef = useRef([]);\r\n  const streamRef = useRef(null);\r\n  const audioContextRef = useRef(null);\r\n  const analyserRef = useRef(null);\r\n  const speakingCheckInterval = useRef(null);\r\n  const currentTheme = THEMES.default;\r\n\r\n  // Initialize audio analysis for speaking detection\r\n  const initAudioAnalysis = useCallback((stream) => {\r\n    if (audioContextRef.current) return;\r\n    \r\n    try {\r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 256;\r\n      \r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      source.connect(analyser);\r\n      \r\n      audioContextRef.current = audioContext;\r\n      analyserRef.current = analyser;\r\n      \r\n      // Start checking speaking status\r\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n      let speaking = false;\r\n      \r\n      speakingCheckInterval.current = setInterval(() => {\r\n        analyser.getByteFrequencyData(dataArray);\r\n        const sum = dataArray.reduce((a, b) => a + b, 0);\r\n        const avg = sum / dataArray.length;\r\n        const isCurrentlySpeaking = avg > 10; // Threshold\r\n        \r\n        if (isCurrentlySpeaking !== speaking) {\r\n          speaking = isCurrentlySpeaking;\r\n          setIsSpeaking(speaking);\r\n          socket.emit('speakingStatus', { roomId, isSpeaking: speaking });\r\n        }\r\n      }, 200);\r\n    } catch (err) {\r\n      console.error('Audio analysis error:', err);\r\n    }\r\n  }, [socket, roomId]);\r\n\r\n  // Cleanup audio analysis\r\n  const cleanupAudioAnalysis = useCallback(() => {\r\n    if (speakingCheckInterval.current) {\r\n      clearInterval(speakingCheckInterval.current);\r\n      speakingCheckInterval.current = null;\r\n    }\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n      audioContextRef.current = null;\r\n    }\r\n    analyserRef.current = null;\r\n  }, []);\r\n\r\n  // Cleanup a specific peer\r\n  const cleanupPeer = useCallback((peerID) => {\r\n    const peerObj = peersRef.current.find(p => p.peerID === peerID);\r\n    if (peerObj) {\r\n      peerObj.peer.destroy();\r\n      peersRef.current = peersRef.current.filter(p => p.peerID !== peerID);\r\n    }\r\n  }, []);\r\n\r\n  // Full cleanup\r\n  const cleanup = useCallback(() => {\r\n    cleanupAudioAnalysis();\r\n    \r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n    \r\n    peersRef.current.forEach(({ peer }) => peer.destroy());\r\n    peersRef.current = [];\r\n    \r\n    if (userAudio.current) {\r\n      userAudio.current.srcObject = null;\r\n    }\r\n  }, [cleanupAudioAnalysis]);\r\n\r\n  const createPeer = useCallback((userToSignal, callerID, stream) => {\r\n    const existingPeer = peersRef.current.find(p => p.peerID === userToSignal);\r\n    if (existingPeer) return existingPeer.peer;\r\n\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: true,\r\n      stream,\r\n      config: {\r\n        iceServers: [\r\n          { urls: 'stun:stun.l.google.com:19302' },\r\n          { urls: 'stun:stun1.l.google.com:19302' }\r\n        ]\r\n      }\r\n    });\r\n\r\n    peer.on('signal', signal => {\r\n      socket.emit('callSignal', { roomId, signal, to: userToSignal });\r\n    });\r\n\r\n    peer.on('connect', () => {\r\n      console.log('Peer connected:', userToSignal);\r\n      updateParticipantStatus(userToSignal, 'connected');\r\n    });\r\n\r\n    peer.on('error', err => {\r\n      console.error('Peer error:', err);\r\n      updateParticipantStatus(userToSignal, 'disconnected');\r\n      cleanupPeer(userToSignal);\r\n    });\r\n\r\n    peer.on('close', () => {\r\n      updateParticipantStatus(userToSignal, 'disconnected');\r\n      cleanupPeer(userToSignal);\r\n    });\r\n\r\n    return peer;\r\n  }, [socket, roomId, cleanupPeer]);\r\n\r\n  const addPeer = useCallback((incomingSignal, callerID, stream) => {\r\n    const existingPeer = peersRef.current.find(p => p.peerID === callerID);\r\n    if (existingPeer) return existingPeer.peer;\r\n\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: true,\r\n      stream,\r\n      config: {\r\n        iceServers: [\r\n          { urls: 'stun:stun.l.google.com:19302' },\r\n          { urls: 'stun:stun1.l.google.com:19302' }\r\n        ]\r\n      }\r\n    });\r\n\r\n    peer.on('signal', signal => {\r\n      socket.emit('callSignal', { roomId, signal, to: callerID });\r\n    });\r\n\r\n    peer.on('connect', () => {\r\n      console.log('Peer connected:', callerID);\r\n      updateParticipantStatus(callerID, 'connected');\r\n    });\r\n\r\n    peer.on('error', err => {\r\n      console.error('Peer error:', err);\r\n      updateParticipantStatus(callerID, 'disconnected');\r\n      cleanupPeer(callerID);\r\n    });\r\n\r\n    peer.on('close', () => {\r\n      updateParticipantStatus(callerID, 'disconnected');\r\n      cleanupPeer(callerID);\r\n    });\r\n\r\n    const signalWithRetry = () => {\r\n      try {\r\n        peer.signal(incomingSignal);\r\n      } catch (err) {\r\n        console.error('Signaling error, retrying...', err);\r\n        if (peer.destroyed) return;\r\n        setTimeout(signalWithRetry, 500);\r\n      }\r\n    };\r\n\r\n    signalWithRetry();\r\n    \r\n    return peer;\r\n  }, [socket, roomId, cleanupPeer]);\r\n\r\n  // Update participant connection status\r\n  const updateParticipantStatus = (peerID, status) => {\r\n    setParticipants(prev => prev.map(p => \r\n      p.peerID === peerID ? { ...p, connectionStatus: status } : p\r\n    ));\r\n  };\r\n\r\n  // Update participant speaking status\r\n  const updateParticipantSpeaking = (peerID, isSpeaking) => {\r\n    setParticipants(prev => prev.map(p => \r\n      p.peerID === peerID ? { ...p, isSpeaking } : p\r\n    ));\r\n  };\r\n\r\n  // Get all participants including connection status\r\n  const updateAllParticipants = useCallback(() => {\r\n    // Start with current user\r\n    const allParticipants = [{ \r\n      peerID: socket.id, \r\n      username,\r\n      isSelf: true,\r\n      connectionStatus: 'connected',\r\n      isSpeaking: false,\r\n      initials: getInitials(username),\r\n      color: getColorFromName(username)\r\n    }];\r\n\r\n    // Add all call participants\r\n    callState.participants.forEach(participantId => {\r\n      if (participantId !== socket.id) {\r\n        const existingPeer = peersRef.current.find(p => p.peerID === participantId);\r\n        const existingParticipant = allParticipants.find(p => p.peerID === participantId);\r\n        const user = users.find(u => u.id === participantId);\r\n        const participantUsername = user?.username || 'Unknown';\r\n        \r\n        if (!existingParticipant) {\r\n          allParticipants.push({\r\n            peerID: participantId,\r\n            username: participantUsername,\r\n            isSelf: false,\r\n            connectionStatus: existingPeer ? 'connected' : 'connecting',\r\n            isSpeaking: false,\r\n            initials: getInitials(participantUsername),\r\n            color: getColorFromName(participantUsername)\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    setParticipants(allParticipants);\r\n  }, [socket.id, username, callState.participants, users]);\r\n\r\n  useEffect(() => {\r\n    const initCall = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        streamRef.current = stream;\r\n        \r\n        if (userAudio.current) {\r\n          userAudio.current.srcObject = stream;\r\n        }\r\n\r\n        // Initialize audio analysis for speaking detection\r\n        initAudioAnalysis(stream);\r\n\r\n        // Initialize all participants\r\n        updateAllParticipants();\r\n\r\n        // Create peer connections for existing participants\r\n        callState.participants\r\n          .filter(participantId => participantId !== socket.id)\r\n          .forEach(participantId => {\r\n            const peer = createPeer(participantId, socket.id, stream);\r\n            peersRef.current.push({\r\n              peerID: participantId,\r\n              peer,\r\n              username: users.find(u => u.id === participantId)?.username || 'Unknown',\r\n            });\r\n          });\r\n\r\n      } catch (err) {\r\n        console.error('Error accessing media devices:', err);\r\n      }\r\n    };\r\n\r\n    const handleCallSignal = ({ signal, from }) => {\r\n      if (!streamRef.current) return;\r\n      \r\n      const peerObj = peersRef.current.find(p => p.peerID === from);\r\n      if (peerObj) {\r\n        try {\r\n          peerObj.peer.signal(signal);\r\n        } catch (err) {\r\n          console.error('Error signaling existing peer:', err);\r\n          updateParticipantStatus(from, 'disconnected');\r\n          cleanupPeer(from);\r\n        }\r\n      } else {\r\n        const peer = addPeer(signal, from, streamRef.current);\r\n        peersRef.current.push({\r\n          peerID: from,\r\n          peer,\r\n          username: users.find(u => u.id === from)?.username || 'Unknown',\r\n        });\r\n      }\r\n      updateAllParticipants();\r\n    };\r\n\r\n    const handleParticipantJoined = ({ userId, username: joinedUsername }) => {\r\n      if (userId !== socket.id && streamRef.current) {\r\n        const peer = createPeer(userId, socket.id, streamRef.current);\r\n        peersRef.current.push({\r\n          peerID: userId,\r\n          peer,\r\n          username: joinedUsername,\r\n        });\r\n      }\r\n      updateAllParticipants();\r\n    };\r\n\r\n    const handleParticipantLeft = ({ userId }) => {\r\n      cleanupPeer(userId);\r\n      updateParticipantStatus(userId, 'left');\r\n    };\r\n\r\n    const handleSpeakingStatus = ({ userId, isSpeaking }) => {\r\n      updateParticipantSpeaking(userId, isSpeaking);\r\n    };\r\n\r\n    initCall();\r\n\r\n    socket.on('callSignal', handleCallSignal);\r\n    socket.on('callParticipantJoined', handleParticipantJoined);\r\n    socket.on('callParticipantLeft', handleParticipantLeft);\r\n    socket.on('speakingStatus', handleSpeakingStatus);\r\n    socket.on('callEnded', cleanup);\r\n\r\n    // Periodic participant list refresh\r\n    const interval = setInterval(updateAllParticipants, 3000);\r\n\r\n    return () => {\r\n      cleanup();\r\n      clearInterval(interval);\r\n      socket.off('callSignal', handleCallSignal);\r\n      socket.off('callParticipantJoined', handleParticipantJoined);\r\n      socket.off('callParticipantLeft', handleParticipantLeft);\r\n      socket.off('speakingStatus', handleSpeakingStatus);\r\n      socket.off('callEnded', cleanup);\r\n    };\r\n  }, [socket, roomId, callState, users, createPeer, addPeer, cleanup, cleanupPeer, updateAllParticipants, initAudioAnalysis]);\r\n\r\n  const toggleMute = () => {\r\n    if (streamRef.current) {\r\n      const newMutedState = !isMuted;\r\n      streamRef.current.getAudioTracks().forEach(track => {\r\n        track.enabled = !newMutedState;\r\n      });\r\n      setIsMuted(newMutedState);\r\n      setIsSpeaking(false);\r\n      socket.emit('speakingStatus', { roomId, isSpeaking: false });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className={`flex-1 ${currentTheme.card} p-4 overflow-y-auto scrollbar-thin scrollbar-thumb-ghost-600 scrollbar-track-ghost-800`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className={`text-lg font-bold ${currentTheme.textPrimary} gradient-text`}>Voice Call</h2>\r\n        <div className=\"flex space-x-2\">\r\n          <button\r\n            onClick={toggleMute}\r\n            className={`rounded-xl p-2 flex items-center space-x-2 ${\r\n              isMuted ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'\r\n            } text-white transition-all duration-200`}\r\n          >\r\n            {isMuted ? <MicOff className=\"w-5 h-5\" /> : <Mic className=\"w-5 h-5\" />}\r\n            <span>{isMuted ? 'Unmute' : 'Mute'}</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n        {participants.map(({ peerID, username: participantUsername, isSelf, connectionStatus, isSpeaking, initials, color }) => (\r\n          <div \r\n            key={`${peerID}-${participantUsername}`}\r\n            className={`${currentTheme.buttonSecondary} rounded-xl p-4 flex flex-col items-center transition-all duration-300 ${\r\n              isSpeaking ? 'ring-2 ring-purple-500 transform scale-105' : ''\r\n            }`}\r\n          >\r\n            <div \r\n              className=\"w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold text-white mb-2 relative\"\r\n              style={{ backgroundColor: color }}\r\n            >\r\n              {initials}\r\n              {connectionStatus === 'connected' && (\r\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"></div>\r\n              )}\r\n              {connectionStatus === 'connecting' && (\r\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-yellow-500 rounded-full border-2 border-white animate-pulse\"></div>\r\n              )}\r\n              {connectionStatus === 'disconnected' && (\r\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-red-500 rounded-full border-2 border-white\"></div>\r\n              )}\r\n            </div>\r\n            \r\n            <span className={`text-sm ${currentTheme.textPrimary} font-medium text-center`}>\r\n              {participantUsername} {isSelf && '(You)'}\r\n            </span>\r\n            \r\n            <span className={`text-xs mt-1 ${\r\n              connectionStatus === 'connected' ? 'text-green-500' :\r\n              connectionStatus === 'connecting' ? 'text-yellow-500' :\r\n              'text-red-500'\r\n            }`}>\r\n              {connectionStatus === 'connected' ? 'Connected' :\r\n               connectionStatus === 'connecting' ? 'Connecting...' :\r\n               'Disconnected'}\r\n            </span>\r\n            \r\n            {isSpeaking && (\r\n              <div className=\"flex space-x-1 mt-2\">\r\n                {[1, 2, 3].map((i) => (\r\n                  <div \r\n                    key={i}\r\n                    className=\"w-1 h-1 bg-purple-500 rounded-full animate-bounce\"\r\n                    style={{ animationDelay: `${i * 0.1}s` }}\r\n                  ></div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            \r\n            {isSelf && <audio ref={userAudio} autoPlay muted={isMuted} />}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CallRoom;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,CAAEC,WAAW,KAAQ,OAAO,CACvE,OAASC,GAAG,CAAEC,MAAM,CAAEC,KAAK,CAAEC,KAAK,CAAEC,QAAQ,KAAQ,cAAc,CAClE,MAAO,CAAAC,IAAI,KAAM,aAAa,CAC9B,OAASC,MAAM,KAAQ,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtC,KAAM,CAAAC,WAAW,CAAIC,IAAI,EAAK,CAC5B,GAAI,CAACA,IAAI,CAAE,MAAO,GAAG,CACrB,KAAM,CAAAC,KAAK,CAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAC7B,GAAID,KAAK,CAACE,MAAM,GAAK,CAAC,CAAE,MAAO,CAAAF,KAAK,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC/D,MAAO,GAAGJ,KAAK,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,GAAGH,KAAK,CAACA,KAAK,CAACE,MAAM,CAAG,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,CAACC,WAAW,CAAC,CAAC,CAClF,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAIN,IAAI,EAAK,CACjC,GAAI,CAACA,IAAI,CAAE,MAAO,SAAS,CAC3B,KAAM,CAAAO,MAAM,CAAG,CACb,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CACrD,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CACrD,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CACrD,SAAS,CAAE,SAAS,CACrB,CACD,GAAI,CAAAC,IAAI,CAAG,CAAC,CACZ,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,IAAI,CAACG,MAAM,CAAEM,CAAC,EAAE,CAAE,CACpCD,IAAI,CAAGR,IAAI,CAACU,UAAU,CAACD,CAAC,CAAC,EAAI,CAACD,IAAI,EAAI,CAAC,EAAIA,IAAI,CAAC,CAClD,CACA,MAAO,CAAAD,MAAM,CAACI,IAAI,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAGD,MAAM,CAACJ,MAAM,CAAC,CAC/C,CAAC,CAED,KAAM,CAAAU,QAAQ,CAAGC,IAAA,EAAoD,IAAnD,CAAEC,MAAM,CAAEC,MAAM,CAAEC,QAAQ,CAAEC,KAAK,CAAEC,SAAU,CAAC,CAAAL,IAAA,CAC9D,KAAM,CAACM,YAAY,CAAEC,eAAe,CAAC,CAAGrC,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACsC,OAAO,CAAEC,UAAU,CAAC,CAAGvC,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACwC,UAAU,CAAEC,aAAa,CAAC,CAAGzC,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAAA0C,SAAS,CAAGxC,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAAyC,QAAQ,CAAGzC,MAAM,CAAC,EAAE,CAAC,CAC3B,KAAM,CAAA0C,SAAS,CAAG1C,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAA2C,eAAe,CAAG3C,MAAM,CAAC,IAAI,CAAC,CACpC,KAAM,CAAA4C,WAAW,CAAG5C,MAAM,CAAC,IAAI,CAAC,CAChC,KAAM,CAAA6C,qBAAqB,CAAG7C,MAAM,CAAC,IAAI,CAAC,CAC1C,KAAM,CAAA8C,YAAY,CAAGtC,MAAM,CAACuC,OAAO,CAEnC;AACA,KAAM,CAAAC,iBAAiB,CAAG/C,WAAW,CAAEgD,MAAM,EAAK,CAChD,GAAIN,eAAe,CAACO,OAAO,CAAE,OAE7B,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,IAAKC,MAAM,CAACC,YAAY,EAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC,CAC7E,KAAM,CAAAC,QAAQ,CAAGJ,YAAY,CAACK,cAAc,CAAC,CAAC,CAC9CD,QAAQ,CAACE,OAAO,CAAG,GAAG,CAEtB,KAAM,CAAAC,MAAM,CAAGP,YAAY,CAACQ,uBAAuB,CAACV,MAAM,CAAC,CAC3DS,MAAM,CAACE,OAAO,CAACL,QAAQ,CAAC,CAExBZ,eAAe,CAACO,OAAO,CAAGC,YAAY,CACtCP,WAAW,CAACM,OAAO,CAAGK,QAAQ,CAE9B;AACA,KAAM,CAAAM,SAAS,CAAG,GAAI,CAAAC,UAAU,CAACP,QAAQ,CAACQ,iBAAiB,CAAC,CAC5D,GAAI,CAAAC,QAAQ,CAAG,KAAK,CAEpBnB,qBAAqB,CAACK,OAAO,CAAGe,WAAW,CAAC,IAAM,CAChDV,QAAQ,CAACW,oBAAoB,CAACL,SAAS,CAAC,CACxC,KAAM,CAAAM,GAAG,CAAGN,SAAS,CAACO,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAE,CAAC,CAAC,CAChD,KAAM,CAAAC,GAAG,CAAGJ,GAAG,CAAGN,SAAS,CAAC5C,MAAM,CAClC,KAAM,CAAAuD,mBAAmB,CAAGD,GAAG,CAAG,EAAE,CAAE;AAEtC,GAAIC,mBAAmB,GAAKR,QAAQ,CAAE,CACpCA,QAAQ,CAAGQ,mBAAmB,CAC9BjC,aAAa,CAACyB,QAAQ,CAAC,CACvBnC,MAAM,CAAC4C,IAAI,CAAC,gBAAgB,CAAE,CAAE3C,MAAM,CAAEQ,UAAU,CAAE0B,QAAS,CAAC,CAAC,CACjE,CACF,CAAC,CAAE,GAAG,CAAC,CACT,CAAE,MAAOU,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAEF,GAAG,CAAC,CAC7C,CACF,CAAC,CAAE,CAAC7C,MAAM,CAAEC,MAAM,CAAC,CAAC,CAEpB;AACA,KAAM,CAAA+C,oBAAoB,CAAG5E,WAAW,CAAC,IAAM,CAC7C,GAAI4C,qBAAqB,CAACK,OAAO,CAAE,CACjC4B,aAAa,CAACjC,qBAAqB,CAACK,OAAO,CAAC,CAC5CL,qBAAqB,CAACK,OAAO,CAAG,IAAI,CACtC,CACA,GAAIP,eAAe,CAACO,OAAO,CAAE,CAC3BP,eAAe,CAACO,OAAO,CAAC6B,KAAK,CAAC,CAAC,CAC/BpC,eAAe,CAACO,OAAO,CAAG,IAAI,CAChC,CACAN,WAAW,CAACM,OAAO,CAAG,IAAI,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA8B,WAAW,CAAG/E,WAAW,CAAEgF,MAAM,EAAK,CAC1C,KAAM,CAAAC,OAAO,CAAGzC,QAAQ,CAACS,OAAO,CAACiC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAKA,MAAM,CAAC,CAC/D,GAAIC,OAAO,CAAE,CACXA,OAAO,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CACtB7C,QAAQ,CAACS,OAAO,CAAGT,QAAQ,CAACS,OAAO,CAACqC,MAAM,CAACH,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAKA,MAAM,CAAC,CACtE,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAO,OAAO,CAAGvF,WAAW,CAAC,IAAM,CAChC4E,oBAAoB,CAAC,CAAC,CAEtB,GAAInC,SAAS,CAACQ,OAAO,CAAE,CACrBR,SAAS,CAACQ,OAAO,CAACuC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,EAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CAC5DlD,SAAS,CAACQ,OAAO,CAAG,IAAI,CAC1B,CAEAT,QAAQ,CAACS,OAAO,CAACwC,OAAO,CAACG,KAAA,MAAC,CAAER,IAAK,CAAC,CAAAQ,KAAA,OAAK,CAAAR,IAAI,CAACC,OAAO,CAAC,CAAC,GAAC,CACtD7C,QAAQ,CAACS,OAAO,CAAG,EAAE,CAErB,GAAIV,SAAS,CAACU,OAAO,CAAE,CACrBV,SAAS,CAACU,OAAO,CAAC4C,SAAS,CAAG,IAAI,CACpC,CACF,CAAC,CAAE,CAACjB,oBAAoB,CAAC,CAAC,CAE1B,KAAM,CAAAkB,UAAU,CAAG9F,WAAW,CAAC,CAAC+F,YAAY,CAAEC,QAAQ,CAAEhD,MAAM,GAAK,CACjE,KAAM,CAAAiD,YAAY,CAAGzD,QAAQ,CAACS,OAAO,CAACiC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAKe,YAAY,CAAC,CAC1E,GAAIE,YAAY,CAAE,MAAO,CAAAA,YAAY,CAACb,IAAI,CAE1C,KAAM,CAAAA,IAAI,CAAG,GAAI,CAAA9E,IAAI,CAAC,CACpB4F,SAAS,CAAE,IAAI,CACfC,OAAO,CAAE,IAAI,CACbnD,MAAM,CACNoD,MAAM,CAAE,CACNC,UAAU,CAAE,CACV,CAAEC,IAAI,CAAE,8BAA+B,CAAC,CACxC,CAAEA,IAAI,CAAE,+BAAgC,CAAC,CAE7C,CACF,CAAC,CAAC,CAEFlB,IAAI,CAACmB,EAAE,CAAC,QAAQ,CAAEC,MAAM,EAAI,CAC1B5E,MAAM,CAAC4C,IAAI,CAAC,YAAY,CAAE,CAAE3C,MAAM,CAAE2E,MAAM,CAAEC,EAAE,CAAEV,YAAa,CAAC,CAAC,CACjE,CAAC,CAAC,CAEFX,IAAI,CAACmB,EAAE,CAAC,SAAS,CAAE,IAAM,CACvB7B,OAAO,CAACgC,GAAG,CAAC,iBAAiB,CAAEX,YAAY,CAAC,CAC5CY,uBAAuB,CAACZ,YAAY,CAAE,WAAW,CAAC,CACpD,CAAC,CAAC,CAEFX,IAAI,CAACmB,EAAE,CAAC,OAAO,CAAE9B,GAAG,EAAI,CACtBC,OAAO,CAACC,KAAK,CAAC,aAAa,CAAEF,GAAG,CAAC,CACjCkC,uBAAuB,CAACZ,YAAY,CAAE,cAAc,CAAC,CACrDhB,WAAW,CAACgB,YAAY,CAAC,CAC3B,CAAC,CAAC,CAEFX,IAAI,CAACmB,EAAE,CAAC,OAAO,CAAE,IAAM,CACrBI,uBAAuB,CAACZ,YAAY,CAAE,cAAc,CAAC,CACrDhB,WAAW,CAACgB,YAAY,CAAC,CAC3B,CAAC,CAAC,CAEF,MAAO,CAAAX,IAAI,CACb,CAAC,CAAE,CAACxD,MAAM,CAAEC,MAAM,CAAEkD,WAAW,CAAC,CAAC,CAEjC,KAAM,CAAA6B,OAAO,CAAG5G,WAAW,CAAC,CAAC6G,cAAc,CAAEb,QAAQ,CAAEhD,MAAM,GAAK,CAChE,KAAM,CAAAiD,YAAY,CAAGzD,QAAQ,CAACS,OAAO,CAACiC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAKgB,QAAQ,CAAC,CACtE,GAAIC,YAAY,CAAE,MAAO,CAAAA,YAAY,CAACb,IAAI,CAE1C,KAAM,CAAAA,IAAI,CAAG,GAAI,CAAA9E,IAAI,CAAC,CACpB4F,SAAS,CAAE,KAAK,CAChBC,OAAO,CAAE,IAAI,CACbnD,MAAM,CACNoD,MAAM,CAAE,CACNC,UAAU,CAAE,CACV,CAAEC,IAAI,CAAE,8BAA+B,CAAC,CACxC,CAAEA,IAAI,CAAE,+BAAgC,CAAC,CAE7C,CACF,CAAC,CAAC,CAEFlB,IAAI,CAACmB,EAAE,CAAC,QAAQ,CAAEC,MAAM,EAAI,CAC1B5E,MAAM,CAAC4C,IAAI,CAAC,YAAY,CAAE,CAAE3C,MAAM,CAAE2E,MAAM,CAAEC,EAAE,CAAET,QAAS,CAAC,CAAC,CAC7D,CAAC,CAAC,CAEFZ,IAAI,CAACmB,EAAE,CAAC,SAAS,CAAE,IAAM,CACvB7B,OAAO,CAACgC,GAAG,CAAC,iBAAiB,CAAEV,QAAQ,CAAC,CACxCW,uBAAuB,CAACX,QAAQ,CAAE,WAAW,CAAC,CAChD,CAAC,CAAC,CAEFZ,IAAI,CAACmB,EAAE,CAAC,OAAO,CAAE9B,GAAG,EAAI,CACtBC,OAAO,CAACC,KAAK,CAAC,aAAa,CAAEF,GAAG,CAAC,CACjCkC,uBAAuB,CAACX,QAAQ,CAAE,cAAc,CAAC,CACjDjB,WAAW,CAACiB,QAAQ,CAAC,CACvB,CAAC,CAAC,CAEFZ,IAAI,CAACmB,EAAE,CAAC,OAAO,CAAE,IAAM,CACrBI,uBAAuB,CAACX,QAAQ,CAAE,cAAc,CAAC,CACjDjB,WAAW,CAACiB,QAAQ,CAAC,CACvB,CAAC,CAAC,CAEF,KAAM,CAAAc,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI,CACF1B,IAAI,CAACoB,MAAM,CAACK,cAAc,CAAC,CAC7B,CAAE,MAAOpC,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAEF,GAAG,CAAC,CAClD,GAAIW,IAAI,CAAC2B,SAAS,CAAE,OACpBC,UAAU,CAACF,eAAe,CAAE,GAAG,CAAC,CAClC,CACF,CAAC,CAEDA,eAAe,CAAC,CAAC,CAEjB,MAAO,CAAA1B,IAAI,CACb,CAAC,CAAE,CAACxD,MAAM,CAAEC,MAAM,CAAEkD,WAAW,CAAC,CAAC,CAEjC;AACA,KAAM,CAAA4B,uBAAuB,CAAGA,CAAC3B,MAAM,CAAEiC,MAAM,GAAK,CAClD/E,eAAe,CAACgF,IAAI,EAAIA,IAAI,CAACC,GAAG,CAAChC,CAAC,EAChCA,CAAC,CAACH,MAAM,GAAKA,MAAM,CAAG,CAAE,GAAGG,CAAC,CAAEiC,gBAAgB,CAAEH,MAAO,CAAC,CAAG9B,CAC7D,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAkC,yBAAyB,CAAGA,CAACrC,MAAM,CAAE3C,UAAU,GAAK,CACxDH,eAAe,CAACgF,IAAI,EAAIA,IAAI,CAACC,GAAG,CAAChC,CAAC,EAChCA,CAAC,CAACH,MAAM,GAAKA,MAAM,CAAG,CAAE,GAAGG,CAAC,CAAE9C,UAAW,CAAC,CAAG8C,CAC/C,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAmC,qBAAqB,CAAGtH,WAAW,CAAC,IAAM,CAC9C;AACA,KAAM,CAAAuH,eAAe,CAAG,CAAC,CACvBvC,MAAM,CAAEpD,MAAM,CAAC4F,EAAE,CACjB1F,QAAQ,CACR2F,MAAM,CAAE,IAAI,CACZL,gBAAgB,CAAE,WAAW,CAC7B/E,UAAU,CAAE,KAAK,CACjBqF,QAAQ,CAAE9G,WAAW,CAACkB,QAAQ,CAAC,CAC/B6F,KAAK,CAAExG,gBAAgB,CAACW,QAAQ,CAClC,CAAC,CAAC,CAEF;AACAE,SAAS,CAACC,YAAY,CAACwD,OAAO,CAACmC,aAAa,EAAI,CAC9C,GAAIA,aAAa,GAAKhG,MAAM,CAAC4F,EAAE,CAAE,CAC/B,KAAM,CAAAvB,YAAY,CAAGzD,QAAQ,CAACS,OAAO,CAACiC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAK4C,aAAa,CAAC,CAC3E,KAAM,CAAAC,mBAAmB,CAAGN,eAAe,CAACrC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAK4C,aAAa,CAAC,CACjF,KAAM,CAAAE,IAAI,CAAG/F,KAAK,CAACmD,IAAI,CAAC6C,CAAC,EAAIA,CAAC,CAACP,EAAE,GAAKI,aAAa,CAAC,CACpD,KAAM,CAAAI,mBAAmB,CAAG,CAAAF,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEhG,QAAQ,GAAI,SAAS,CAEvD,GAAI,CAAC+F,mBAAmB,CAAE,CACxBN,eAAe,CAACU,IAAI,CAAC,CACnBjD,MAAM,CAAE4C,aAAa,CACrB9F,QAAQ,CAAEkG,mBAAmB,CAC7BP,MAAM,CAAE,KAAK,CACbL,gBAAgB,CAAEnB,YAAY,CAAG,WAAW,CAAG,YAAY,CAC3D5D,UAAU,CAAE,KAAK,CACjBqF,QAAQ,CAAE9G,WAAW,CAACoH,mBAAmB,CAAC,CAC1CL,KAAK,CAAExG,gBAAgB,CAAC6G,mBAAmB,CAC7C,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAC,CAEF9F,eAAe,CAACqF,eAAe,CAAC,CAClC,CAAC,CAAE,CAAC3F,MAAM,CAAC4F,EAAE,CAAE1F,QAAQ,CAAEE,SAAS,CAACC,YAAY,CAAEF,KAAK,CAAC,CAAC,CAExDjC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoI,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAI,CACF,KAAM,CAAAlF,MAAM,CAAG,KAAM,CAAAmF,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CACzE7F,SAAS,CAACQ,OAAO,CAAGD,MAAM,CAE1B,GAAIT,SAAS,CAACU,OAAO,CAAE,CACrBV,SAAS,CAACU,OAAO,CAAC4C,SAAS,CAAG7C,MAAM,CACtC,CAEA;AACAD,iBAAiB,CAACC,MAAM,CAAC,CAEzB;AACAsE,qBAAqB,CAAC,CAAC,CAEvB;AACAtF,SAAS,CAACC,YAAY,CACnBqD,MAAM,CAACsC,aAAa,EAAIA,aAAa,GAAKhG,MAAM,CAAC4F,EAAE,CAAC,CACpD/B,OAAO,CAACmC,aAAa,EAAI,KAAAW,WAAA,CACxB,KAAM,CAAAnD,IAAI,CAAGU,UAAU,CAAC8B,aAAa,CAAEhG,MAAM,CAAC4F,EAAE,CAAExE,MAAM,CAAC,CACzDR,QAAQ,CAACS,OAAO,CAACgF,IAAI,CAAC,CACpBjD,MAAM,CAAE4C,aAAa,CACrBxC,IAAI,CACJtD,QAAQ,CAAE,EAAAyG,WAAA,CAAAxG,KAAK,CAACmD,IAAI,CAAC6C,CAAC,EAAIA,CAAC,CAACP,EAAE,GAAKI,aAAa,CAAC,UAAAW,WAAA,iBAAvCA,WAAA,CAAyCzG,QAAQ,GAAI,SACjE,CAAC,CAAC,CACJ,CAAC,CAAC,CAEN,CAAE,MAAO2C,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAEF,GAAG,CAAC,CACtD,CACF,CAAC,CAED,KAAM,CAAA+D,gBAAgB,CAAGC,KAAA,EAAsB,IAArB,CAAEjC,MAAM,CAAEkC,IAAK,CAAC,CAAAD,KAAA,CACxC,GAAI,CAAChG,SAAS,CAACQ,OAAO,CAAE,OAExB,KAAM,CAAAgC,OAAO,CAAGzC,QAAQ,CAACS,OAAO,CAACiC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,MAAM,GAAK0D,IAAI,CAAC,CAC7D,GAAIzD,OAAO,CAAE,CACX,GAAI,CACFA,OAAO,CAACG,IAAI,CAACoB,MAAM,CAACA,MAAM,CAAC,CAC7B,CAAE,MAAO/B,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAEF,GAAG,CAAC,CACpDkC,uBAAuB,CAAC+B,IAAI,CAAE,cAAc,CAAC,CAC7C3D,WAAW,CAAC2D,IAAI,CAAC,CACnB,CACF,CAAC,IAAM,KAAAC,YAAA,CACL,KAAM,CAAAvD,IAAI,CAAGwB,OAAO,CAACJ,MAAM,CAAEkC,IAAI,CAAEjG,SAAS,CAACQ,OAAO,CAAC,CACrDT,QAAQ,CAACS,OAAO,CAACgF,IAAI,CAAC,CACpBjD,MAAM,CAAE0D,IAAI,CACZtD,IAAI,CACJtD,QAAQ,CAAE,EAAA6G,YAAA,CAAA5G,KAAK,CAACmD,IAAI,CAAC6C,CAAC,EAAIA,CAAC,CAACP,EAAE,GAAKkB,IAAI,CAAC,UAAAC,YAAA,iBAA9BA,YAAA,CAAgC7G,QAAQ,GAAI,SACxD,CAAC,CAAC,CACJ,CACAwF,qBAAqB,CAAC,CAAC,CACzB,CAAC,CAED,KAAM,CAAAsB,uBAAuB,CAAGC,KAAA,EAA0C,IAAzC,CAAEC,MAAM,CAAEhH,QAAQ,CAAEiH,cAAe,CAAC,CAAAF,KAAA,CACnE,GAAIC,MAAM,GAAKlH,MAAM,CAAC4F,EAAE,EAAI/E,SAAS,CAACQ,OAAO,CAAE,CAC7C,KAAM,CAAAmC,IAAI,CAAGU,UAAU,CAACgD,MAAM,CAAElH,MAAM,CAAC4F,EAAE,CAAE/E,SAAS,CAACQ,OAAO,CAAC,CAC7DT,QAAQ,CAACS,OAAO,CAACgF,IAAI,CAAC,CACpBjD,MAAM,CAAE8D,MAAM,CACd1D,IAAI,CACJtD,QAAQ,CAAEiH,cACZ,CAAC,CAAC,CACJ,CACAzB,qBAAqB,CAAC,CAAC,CACzB,CAAC,CAED,KAAM,CAAA0B,qBAAqB,CAAGC,KAAA,EAAgB,IAAf,CAAEH,MAAO,CAAC,CAAAG,KAAA,CACvClE,WAAW,CAAC+D,MAAM,CAAC,CACnBnC,uBAAuB,CAACmC,MAAM,CAAE,MAAM,CAAC,CACzC,CAAC,CAED,KAAM,CAAAI,oBAAoB,CAAGC,KAAA,EAA4B,IAA3B,CAAEL,MAAM,CAAEzG,UAAW,CAAC,CAAA8G,KAAA,CAClD9B,yBAAyB,CAACyB,MAAM,CAAEzG,UAAU,CAAC,CAC/C,CAAC,CAED6F,QAAQ,CAAC,CAAC,CAEVtG,MAAM,CAAC2E,EAAE,CAAC,YAAY,CAAEiC,gBAAgB,CAAC,CACzC5G,MAAM,CAAC2E,EAAE,CAAC,uBAAuB,CAAEqC,uBAAuB,CAAC,CAC3DhH,MAAM,CAAC2E,EAAE,CAAC,qBAAqB,CAAEyC,qBAAqB,CAAC,CACvDpH,MAAM,CAAC2E,EAAE,CAAC,gBAAgB,CAAE2C,oBAAoB,CAAC,CACjDtH,MAAM,CAAC2E,EAAE,CAAC,WAAW,CAAEhB,OAAO,CAAC,CAE/B;AACA,KAAM,CAAA6D,QAAQ,CAAGpF,WAAW,CAACsD,qBAAqB,CAAE,IAAI,CAAC,CAEzD,MAAO,IAAM,CACX/B,OAAO,CAAC,CAAC,CACTV,aAAa,CAACuE,QAAQ,CAAC,CACvBxH,MAAM,CAACyH,GAAG,CAAC,YAAY,CAAEb,gBAAgB,CAAC,CAC1C5G,MAAM,CAACyH,GAAG,CAAC,uBAAuB,CAAET,uBAAuB,CAAC,CAC5DhH,MAAM,CAACyH,GAAG,CAAC,qBAAqB,CAAEL,qBAAqB,CAAC,CACxDpH,MAAM,CAACyH,GAAG,CAAC,gBAAgB,CAAEH,oBAAoB,CAAC,CAClDtH,MAAM,CAACyH,GAAG,CAAC,WAAW,CAAE9D,OAAO,CAAC,CAClC,CAAC,CACH,CAAC,CAAE,CAAC3D,MAAM,CAAEC,MAAM,CAAEG,SAAS,CAAED,KAAK,CAAE+D,UAAU,CAAEc,OAAO,CAAErB,OAAO,CAAER,WAAW,CAAEuC,qBAAqB,CAAEvE,iBAAiB,CAAC,CAAC,CAE3H,KAAM,CAAAuG,UAAU,CAAGA,CAAA,GAAM,CACvB,GAAI7G,SAAS,CAACQ,OAAO,CAAE,CACrB,KAAM,CAAAsG,aAAa,CAAG,CAACpH,OAAO,CAC9BM,SAAS,CAACQ,OAAO,CAACuG,cAAc,CAAC,CAAC,CAAC/D,OAAO,CAACC,KAAK,EAAI,CAClDA,KAAK,CAAC+D,OAAO,CAAG,CAACF,aAAa,CAChC,CAAC,CAAC,CACFnH,UAAU,CAACmH,aAAa,CAAC,CACzBjH,aAAa,CAAC,KAAK,CAAC,CACpBV,MAAM,CAAC4C,IAAI,CAAC,gBAAgB,CAAE,CAAE3C,MAAM,CAAEQ,UAAU,CAAE,KAAM,CAAC,CAAC,CAC9D,CACF,CAAC,CAID,mBACE1B,KAAA,QAAK+I,SAAS,CAAE,UAAU7G,YAAY,CAAC8G,IAAI,yFAA0F,CAAAC,QAAA,eACnIjJ,KAAA,QAAK+I,SAAS,CAAC,wCAAwC,CAAAE,QAAA,eACrDnJ,IAAA,OAAIiJ,SAAS,CAAE,qBAAqB7G,YAAY,CAACgH,WAAW,gBAAiB,CAAAD,QAAA,CAAC,YAAU,CAAI,CAAC,cAC7FnJ,IAAA,QAAKiJ,SAAS,CAAC,gBAAgB,CAAAE,QAAA,cAC7BjJ,KAAA,WACEmJ,OAAO,CAAER,UAAW,CACpBI,SAAS,CAAE,8CACTvH,OAAO,CAAG,6BAA6B,CAAG,iCAAiC,yCACnC,CAAAyH,QAAA,EAEzCzH,OAAO,cAAG1B,IAAA,CAACP,MAAM,EAACwJ,SAAS,CAAC,SAAS,CAAE,CAAC,cAAGjJ,IAAA,CAACR,GAAG,EAACyJ,SAAS,CAAC,SAAS,CAAE,CAAC,cACvEjJ,IAAA,SAAAmJ,QAAA,CAAOzH,OAAO,CAAG,QAAQ,CAAG,MAAM,CAAO,CAAC,EACpC,CAAC,CACN,CAAC,EACH,CAAC,cAEN1B,IAAA,QAAKiJ,SAAS,CAAC,qEAAqE,CAAAE,QAAA,CACjF3H,YAAY,CAACkF,GAAG,CAAC4C,KAAA,MAAC,CAAE/E,MAAM,CAAElD,QAAQ,CAAEkG,mBAAmB,CAAEP,MAAM,CAAEL,gBAAgB,CAAE/E,UAAU,CAAEqF,QAAQ,CAAEC,KAAM,CAAC,CAAAoC,KAAA,oBACjHpJ,KAAA,QAEE+I,SAAS,CAAE,GAAG7G,YAAY,CAACmH,eAAe,0EACxC3H,UAAU,CAAG,4CAA4C,CAAG,EAAE,EAC7D,CAAAuH,QAAA,eAEHjJ,KAAA,QACE+I,SAAS,CAAC,qGAAqG,CAC/GO,KAAK,CAAE,CAAEC,eAAe,CAAEvC,KAAM,CAAE,CAAAiC,QAAA,EAEjClC,QAAQ,CACRN,gBAAgB,GAAK,WAAW,eAC/B3G,IAAA,QAAKiJ,SAAS,CAAC,mFAAmF,CAAM,CACzG,CACAtC,gBAAgB,GAAK,YAAY,eAChC3G,IAAA,QAAKiJ,SAAS,CAAC,kGAAkG,CAAM,CACxH,CACAtC,gBAAgB,GAAK,cAAc,eAClC3G,IAAA,QAAKiJ,SAAS,CAAC,iFAAiF,CAAM,CACvG,EACE,CAAC,cAEN/I,KAAA,SAAM+I,SAAS,CAAE,WAAW7G,YAAY,CAACgH,WAAW,0BAA2B,CAAAD,QAAA,EAC5E5B,mBAAmB,CAAC,GAAC,CAACP,MAAM,EAAI,OAAO,EACpC,CAAC,cAEPhH,IAAA,SAAMiJ,SAAS,CAAE,gBACftC,gBAAgB,GAAK,WAAW,CAAG,gBAAgB,CACnDA,gBAAgB,GAAK,YAAY,CAAG,iBAAiB,CACrD,cAAc,EACb,CAAAwC,QAAA,CACAxC,gBAAgB,GAAK,WAAW,CAAG,WAAW,CAC9CA,gBAAgB,GAAK,YAAY,CAAG,eAAe,CACnD,cAAc,CACX,CAAC,CAEN/E,UAAU,eACT5B,IAAA,QAAKiJ,SAAS,CAAC,qBAAqB,CAAAE,QAAA,CACjC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAACzC,GAAG,CAAE7F,CAAC,eACfb,IAAA,QAEEiJ,SAAS,CAAC,mDAAmD,CAC7DO,KAAK,CAAE,CAAEE,cAAc,CAAE,GAAG7I,CAAC,CAAG,GAAG,GAAI,CAAE,EAFpCA,CAGD,CACP,CAAC,CACC,CACN,CAEAmG,MAAM,eAAIhH,IAAA,UAAO2J,GAAG,CAAE7H,SAAU,CAAC8H,QAAQ,MAACC,KAAK,CAAEnI,OAAQ,CAAE,CAAC,GA/CxD,GAAG6C,MAAM,IAAIgD,mBAAmB,EAgDlC,CAAC,EACP,CAAC,CACC,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtG,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}